environment:
  CARGO_HOME: "c:\\cargo"
  RUSTUP_HOME: "c:\\rustup"
  BINARY_NAME: "pyo3-pack.exe"
  global:
    PROJECT_NAME: pyo3-pack
    RUST_BACKTRACE: full
  matrix:
    - TARGET: i686-pc-windows-gnu
      CHANNEL: stable
    - TARGET: i686-pc-windows-msvc
      CHANNEL: stable
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: stable
    - TARGET: x86_64-pc-windows-msvc
      CHANNEL: stable

matrix:
  fast_finish: true

build: off

cache:
  - '%CARGO_HOME%\registry'
  - target
  - '%RUSTUP_HOME%'

clone_folder: 'c:\projects\%PROJECT_NAME%'

# Install Rust and Cargo
# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)
install:
  - ps: |
      # For the gnu target we need gcc, provided by mingw. mingw which is already preinstalled,
      # but we need the right version (32-bit or 64-bit) to the PATH.
      # See https://www.appveyor.com/docs/build-environment/#mingw-msys-cygwin
      if ($env:target -like "*-gnu") {
        if ($env:target -like "x86_64-*") { # x86_64-pc-windows-gnu
          $env:path = "C:\msys64\mingw64\bin;" + $env:path
        } else { # i686-pc-windows-gnu
          $env:path = "C:\mingw\bin;" + $env:path
        }
        gcc --version
      }
  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init.exe -yv --default-host %TARGET% --no-modify-path
  - SET PATH=%PATH%;%CARGO_HOME%\bin
  - rustc -V
  - cargo -V

test_script:
  - cargo test

before_deploy:
  - cargo build --release
  # Grab the binary and pack it into a zip archive
  - mkdir staging
  - copy target\release\%BINARY_NAME% staging
  # You can add more file to the archive with `ps: copy some\path\to\file staging`
  - cd staging
  # The file will have a name like "rust-everywhere-v1.2.3-x86_64-pc-windows-msvc.zip"
  - 7z a ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip *
  - appveyor PushArtifact ../%PROJECT_NAME%-%APPVEYOR_REPO_TAG_NAME%-%TARGET%.zip

deploy:
  # Add zipped binary to the github release
  - artifact: /*.zip/
    # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
    # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
    # - Paste the output down here
    auth_token:
      secure: PQ91ezDbGmow+5tjZCAQ2/Y/2bHFffmQZoa5lr09JQIwARsAa2jHtucVn9826lWG
    provider: GitHub
    on:
      # Deploy when a new tag is pushed and only on the stable channel
      # NOTE make sure you only release *once* per target
      CHANNEL: stable
      appveyor_repo_tag: true

branches:
  only:
    - /v\d+\.\d+\.\d+/
    - master
